VMCode = (Operator+):ops { VMProgram(:ops) };

Operator = CommonOperator | ConditionalOperator | ShowOperator;

CommonOperator =
	MarkExpression:mk ws ":" ws VariableName$vn ws ":=" ws Expression:e "goto" ws MarkExpression:gtmk ws ";" ws { CNOP(:mk, Var($vn), :e, :gtmk) };

ConditionalOperator =
	MarkExpression:mk ws ":" ws ConditionExpression:ce "then" ws MarkExpression:tmk ws "else" ws MarkExpression:fmk ws ";" ws { CLOP(:mk, :ce, :tmk, :fmk) };

ShowOperator = 
	MarkExpression:mk ws ":" ws "SHOW" ws VariableExpression:ve ws "goto" ws MarkExpression:gtmk ws ";" ws { SOP(:mk, :ve, :gtmk) };

MarkExpression = digit+$mk { Mark(s2i($mk)) };

Expression = "(" ws Expression:e1 "+" ws Expression:e2 ")" ws { Sum(:e1, :e2) }
		   | "(" ws Expression:e1 "-" ws Expression:e2 ")" ws { Sub(:e1, :e2) }
		   | "(" ws Expression:e1 "*" ws Expression:e2 ")" ws { Mul(:e1, :e2) }
		   | "(" ws Expression:e1 "/" ws Expression:e2 ")" ws { Div(:e1, :e2) }
		   | "(" ws Expression:e ")" ws { :e }
		   | "(" ws ArrayOperationExpression:aoe ")" ws { :aoe }
		   | "(" ws VariableExpression:ve ")" ws { :ve }
		   | "(" ws ConstExpression:ce ")" ws { :ce }
		   | "(" ws VariableName$vn ws ")" ws { Var($vn) };

ArrayOperationExpression =
	  "UPD(" ws VariableExpression:vre "," ws Expression:ie "," ws Expression:ve ")" ws { UPD(:vre, :ie, :ve) }
	| "APP(" ws VariableExpression:vre "," ws Expression:ie ")" ws { APP(:vre, :ie) };

VariableExpression = "(" VariableName$vn ws ")" ws { Var($vn) };

ConstExpression =
	  "[" ws ConstExpression:ace0 ("," ws ConstExpression)*:ace1n "]" ws {
		  buildArrayConstExpression(:ace0, :ace1n)
	  }
	| "[" ws "]" ws { buildArrayConstExpression() }
	| IntConstExpression:ice { :ice };

IntConstExpression = ("-" digit+)$ni ws { Int(s2i($ni)) }
				   | "+" digit+$pi ws { Int(s2i($pi)) }
				   | digit+$pi ws { Int(s2i($pi)) };

VariableExpression = VariableName:vn ws { Var(:vn) };

ConditionExpression = "(" ws "AND(" ws ConditionExpression:ce1 "," ws ConditionExpression:ce2 ws ")" ws ")" ws { And(:ce1, :ce2) }
					| "(" ws "OR(" ws ConditionExpression:ce1 "," ws ConditionExpression:ce2 ws ")" ws ")" ws { Or(:ce1, :ce2) }
					| "(" ws "NOT(" ws ConditionExpression:ce ")" ws ")" ws { Not(:ce) }
					| "(" ws InequalityExpression:ie ")" ws { :ie };

InequalityExpression = Expression:e1 "<" ws Expression:e2 { Less(:e1, :e2) }
					 | Expression:e1 "=" ws Expression:e2 { Equal(:e1, :e2) }
					 | Expression:e1 ">" ws Expression:e2 { Greater(:e1, :e2) }
					 | Expression:e1 "<=" ws Expression:e2 { LeQ(:e1, :e2) }
					 | Expression:e1 ">=" ws Expression:e2 { GeQ(:e1, :e2) };

VariableName = letter (letter | digit)*:vn { :vn };
letter = 'a'-'z';
digit = '0'-'9';

// ws stands for whitespaces sequences.
ws = s*;
s = " " | "\t" | "\n";